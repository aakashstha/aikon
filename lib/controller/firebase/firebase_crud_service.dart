import 'package:aikon/controller/offer_controller.dart';
import 'package:aikon/model/offer_model.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:get/get.dart';

final _offerController = Get.find<OfferController>();

class FirebaseCRUDService {
  static final FirebaseFirestore db = FirebaseFirestore.instance;
  var locationDetailsLenght = 0.obs;

  static String offerCollection = "offers";

  // Add Offer
  static Future<void> createOffer() async {
    _offerController.loading.value = true;
    var offerData = {
      "isSell": _offerController.isSell.value,
      "title": _offerController.titleController.text,
      "subtitle": _offerController.subTitleController.text,
      "description": _offerController.descriptionController.text,
      "countryName": _offerController.countryNameController.text,
      "cityName": _offerController.cityNameController.text,
      "imagesList": _offerController.imagesList,
      "channelList": _offerController.channelList,
      "isAnonymous": _offerController.postAnonymously.value,
      "userId": FirebaseAuth.instance.currentUser!.uid,
      "createdAt": DateTime.now(),
    };

    try {
      // String randomAutoGeneratedId = db.collection(offerCollection).doc().id;

      await db.collection(offerCollection).add(offerData);
      _offerController.loading.value = false;
      print("Offer Added");
    } catch (e) {
      _offerController.loading.value = false;
      print("Failed to Add Offer:  $e");
    }
  }

  // Get all Offers Details
  static Future<void> getAllOffers() async {
    _offerController.loading.value = true;
    _offerController.myOffersListings.clear();
    _offerController.otherOffersListings.clear();

    try {
      var offerSnapshot = await db.collection(offerCollection).get();
      _offerController.loading.value = false;

      for (var doc in offerSnapshot.docs) {
        Map<String, dynamic> data = doc.data();
        data['id'] = doc.id;

        if (FirebaseAuth.instance.currentUser!.uid == data["userId"]) {
          _offerController.myOffersListings.add(OfferModel.fromJson(data));
        } else {
          _offerController.otherOffersListings.add(OfferModel.fromJson(data));
        }
      }

      print(_offerController.myOffersListings);
      print("Offer Getting Done");
    } catch (e) {
      _offerController.loading.value = false;
      print("Failed to Get Offer:  $e");
    }
  }

// Update Offers Details
  static Future<void> updateOffer(String id) async {
    _offerController.loading.value = true;
    var updateOfferData = {
      "isSell": _offerController.isSell.value,
      "title": _offerController.titleController.text,
      "subtitle": _offerController.subTitleController.text,
      "description": _offerController.descriptionController.text,
      "countryName": _offerController.countryNameController.text,
      "cityName": _offerController.cityNameController.text,
      "imagesList": _offerController.imagesList,
      "channelList": _offerController.channelList,
      "isAnonymous": _offerController.postAnonymously.value,
      "userId": FirebaseAuth.instance.currentUser!.uid,
      "createdAt": DateTime.now(),
    };

    try {
      await db.collection(offerCollection).doc(id).update(updateOfferData);
      _offerController.loading.value = false;
      print("Offer Updated");
    } catch (e) {
      _offerController.loading.value = false;
      print("Failed to Update Offer:  $e");
    }
  }

  // Delete Offers
  static Future<void> deleteOffer(String id) async {
    _offerController.loading.value = true;
    try {
      await db.collection(offerCollection).doc(id).delete();
      _offerController.loading.value = false;
      print("Offer Deleted");
    } catch (e) {
      _offerController.loading.value = false;
      print("Failed to Delete Offer:  $e");
    }
  }
}
